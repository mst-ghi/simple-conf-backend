definitions:
  auth.LoginDto:
    properties:
      email:
        type: string
      password:
        maxLength: 90
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.PasswordDto:
    properties:
      current_password:
        maxLength: 90
        minLength: 8
        type: string
      new_password:
        maxLength: 90
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  auth.RefreshDto:
    properties:
      access_token:
        maxLength: 50
        minLength: 30
        type: string
      refresh_token:
        maxLength: 50
        minLength: 30
        type: string
    required:
    - access_token
    - refresh_token
    type: object
  auth.RegisterDto:
    properties:
      email:
        type: string
      name:
        maxLength: 190
        minLength: 2
        type: string
      password:
        maxLength: 90
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  auth.Tokens:
    properties:
      access_token:
        type: string
      expires_at:
        type: string
      refresh_token:
        type: string
    type: object
  auth.TokensResponseType:
    properties:
      tokens:
        $ref: '#/definitions/auth.Tokens'
    type: object
  communities.CommunitiesResponseType:
    properties:
      communities:
        items:
          $ref: '#/definitions/communities.Community'
        type: array
    type: object
  communities.Community:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      owner:
        $ref: '#/definitions/users.UserShort'
      owner_id:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/users.UserShort'
        type: array
    type: object
  communities.CommunityResponseType:
    properties:
      community:
        $ref: '#/definitions/communities.Community'
    type: object
  communities.CreateDto:
    properties:
      description:
        maxLength: 250
        minLength: 2
        type: string
      title:
        maxLength: 190
        minLength: 2
        type: string
    required:
    - description
    - title
    type: object
  communities.UpdateDto:
    properties:
      description:
        maxLength: 250
        minLength: 2
        type: string
      title:
        maxLength: 190
        minLength: 2
        type: string
    required:
    - description
    - title
    type: object
  core.Response-auth_TokensResponseType:
    properties:
      data:
        $ref: '#/definitions/auth.TokensResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-communities_CommunitiesResponseType:
    properties:
      data:
        $ref: '#/definitions/communities.CommunitiesResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-communities_CommunityResponseType:
    properties:
      data:
        $ref: '#/definitions/communities.CommunityResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-events_EventResponseType:
    properties:
      data:
        $ref: '#/definitions/events.EventResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-events_EventsResponseType:
    properties:
      data:
        $ref: '#/definitions/events.EventsResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-rooms_RoomResponseType:
    properties:
      data:
        $ref: '#/definitions/rooms.RoomResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-rooms_RoomsResponseType:
    properties:
      data:
        $ref: '#/definitions/rooms.RoomsResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-users_UserResponseType:
    properties:
      data:
        $ref: '#/definitions/users.UserResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-users_UsersResponseType:
    properties:
      data:
        $ref: '#/definitions/users.UsersResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.SuccessResponse:
    properties:
      data:
        type: object
      errors:
        type: object
      message:
        type: string
    type: object
  events.CreateDto:
    properties:
      community_id:
        type: string
      description:
        maxLength: 250
        minLength: 2
        type: string
      duration:
        maximum: 250
        minimum: 0
        type: integer
      start_at:
        type: string
      status:
        type: string
      title:
        maxLength: 190
        minLength: 2
        type: string
    required:
    - community_id
    - description
    - duration
    - start_at
    - status
    - title
    type: object
  events.Event:
    properties:
      community:
        $ref: '#/definitions/communities.Community'
      community_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      duration:
        type: integer
      id:
        type: string
      start_at:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  events.EventResponseType:
    properties:
      event:
        $ref: '#/definitions/events.Event'
    type: object
  events.EventsResponseType:
    properties:
      events:
        items:
          $ref: '#/definitions/events.Event'
        type: array
    type: object
  events.UpdateDto:
    properties:
      description:
        maxLength: 250
        minLength: 2
        type: string
      duration:
        maximum: 250
        minimum: 0
        type: integer
      start_at:
        type: string
      status:
        type: string
      title:
        maxLength: 190
        minLength: 2
        type: string
    required:
    - description
    - duration
    - start_at
    - status
    - title
    type: object
  rooms.CreateDto:
    properties:
      description:
        maxLength: 250
        minLength: 2
        type: string
      mode:
        type: string
      title:
        maxLength: 190
        minLength: 2
        type: string
      user_ids:
        items:
          type: string
        type: array
    required:
    - description
    - mode
    - title
    - user_ids
    type: object
  rooms.RoomResponseType:
    properties:
      room:
        $ref: '#/definitions/rooms.RoomUser'
    type: object
  rooms.RoomUser:
    properties:
      access:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      mode:
        type: string
      owner_id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/users.UserShort'
        type: array
    type: object
  rooms.RoomsResponseType:
    properties:
      rooms:
        items:
          $ref: '#/definitions/rooms.RoomUser'
        type: array
    type: object
  rooms.UpdateDto:
    properties:
      description:
        maxLength: 250
        minLength: 2
        type: string
      mode:
        type: string
      title:
        maxLength: 190
        minLength: 2
        type: string
    required:
    - description
    - mode
    - title
    type: object
  users.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  users.UserResponseType:
    properties:
      user:
        $ref: '#/definitions/users.User'
    type: object
  users.UserShort:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  users.UsersResponseType:
    properties:
      users:
        items:
          $ref: '#/definitions/users.User'
        type: array
    type: object
info:
  contact: {}
paths:
  /api:
    get:
      responses: {}
      summary: app route, get heathy status
      tags:
      - App
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-auth_TokensResponseType'
      summary: login api
      tags:
      - Auth
  /api/v1/auth/logout:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: logout user
      tags:
      - Auth
  /api/v1/auth/password:
    put:
      consumes:
      - application/json
      parameters:
      - description: Change password inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.PasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: change logged in user password
      tags:
      - Auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: Refresh tokens inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-auth_TokensResponseType'
      summary: refresh tokens api
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      summary: register api
      tags:
      - Auth
  /api/v1/auth/user:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-users_UserResponseType'
      security:
      - Bearer: []
      summary: fetch logged in user info
      tags:
      - Auth
  /api/v1/communities:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-communities_CommunitiesResponseType'
      summary: get list of communities
      tags:
      - Communities
    post:
      consumes:
      - application/json
      parameters:
      - description: Create community inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communities.CreateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-communities_CommunityResponseType'
      security:
      - Bearer: []
      summary: create new community
      tags:
      - Communities
  /api/v1/communities/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Community ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-communities_CommunityResponseType'
      summary: get community by id
      tags:
      - Communities
    put:
      consumes:
      - application/json
      parameters:
      - description: Community ID
        in: path
        name: id
        required: true
        type: string
      - description: Update community inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communities.UpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: update community
      tags:
      - Communities
  /api/v1/communities/{id}/join:
    put:
      consumes:
      - application/json
      parameters:
      - description: Community ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: join to community
      tags:
      - Communities
  /api/v1/communities/{id}/left:
    put:
      consumes:
      - application/json
      parameters:
      - description: Community ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: left from community
      tags:
      - Communities
  /api/v1/communities/joined:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-communities_CommunitiesResponseType'
      security:
      - Bearer: []
      summary: get list of joined communities
      tags:
      - Communities
  /api/v1/communities/own:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-communities_CommunitiesResponseType'
      security:
      - Bearer: []
      summary: get list of own communities
      tags:
      - Communities
  /api/v1/events:
    get:
      consumes:
      - application/json
      parameters:
      - description: Community ID
        in: query
        name: community_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-events_EventsResponseType'
      summary: get list of events
      tags:
      - Events
    post:
      consumes:
      - application/json
      parameters:
      - description: Create event inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/events.CreateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-events_EventResponseType'
      security:
      - Bearer: []
      summary: create new event
      tags:
      - Events
  /api/v1/events/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-events_EventResponseType'
      summary: get event by id
      tags:
      - Events
    put:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Update event inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/events.UpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: update event
      tags:
      - Events
  /api/v1/rooms:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-rooms_RoomsResponseType'
      security:
      - Bearer: []
      summary: get list of rooms
      tags:
      - Rooms
    post:
      consumes:
      - application/json
      parameters:
      - description: Create room inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/rooms.CreateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-rooms_RoomResponseType'
      security:
      - Bearer: []
      summary: create new room
      tags:
      - Rooms
  /api/v1/rooms/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-rooms_RoomResponseType'
      security:
      - Bearer: []
      summary: get room by id
      tags:
      - Rooms
    put:
      consumes:
      - application/json
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: string
      - description: Update room inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/rooms.UpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: update room
      tags:
      - Rooms
  /api/v1/users:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-users_UsersResponseType'
      summary: get list of users
      tags:
      - Users
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-users_UserResponseType'
      summary: get user by id
      tags:
      - Users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
